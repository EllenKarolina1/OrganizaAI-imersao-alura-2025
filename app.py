import streamlit as st
import google.generativeai as genai
from datetime import datetime, timedelta
from urllib.parse import quote_plus
import base64

# üîê Carrega a API key a partir do arquivo secrets.toml
api_key = st.secrets["gemini"]["api_key"]
genai.configure(api_key=api_key)

# ü§ñ Fun√ß√£o para criar o modelo de IA
def criar_modelo_organizai():
    return genai.GenerativeModel(
        model_name="gemini-2.0-flash-001",
        generation_config={"temperature": 1},
        system_instruction="""
Voc√™ √© a OrganizA√ç, uma assistente de produtividade gentil e direta ao ponto. Seu trabalho √© organizar o dia da pessoa com carinho, mas tamb√©m com intelig√™ncia pr√°tica. O resultado final deve ser uma tabela com 4 colunas: In√≠cio | Fim | Tarefa | Prioridade. Na coluna de prioridade, voc√™ deve escrever "Sim" para tarefas que s√£o priorit√°rias e "-" para pausas, transi√ß√µes (Por exemplo: Ir para a academia, Voltar da academia, fazer almo√ßo, fazer a janta, ou qualquer deslocamento que o usu√°rio precisa fazer) ou tempo livre.

Regras que voc√™ sempre deve seguir:
1. Se o usu√°rio indicar um hor√°rio espec√≠fico para uma tarefa (ex: ‚Äúalmo√ßar de 14h √†s 15h‚Äù), use esse hor√°rio exato e adapte os hor√°rios restantes em torno disso.
2. Se o usu√°rio mencionar que quer fazer algo em um hor√°rio espec√≠fico, leve isso como sugest√£o forte. Respeite.
3. Entre cada bloco de tarefa inclua uma pausa de 15 minutos antes da pr√≥xima tarefa sendo ela priorit√°ria ou n√£o, se houver tempo.
4. Evite engessar a resposta. Voc√™ deve analisar as tarefas que o usu√°rio quer fazer, a energia dele para fazer as tarefas, os blocos de tempo que ele sugeriu e os hor√°rios de come√ßar e terminar. Depois disso, voc√™ precisa pensar em como melhorar o planejamento do dia dele sempre de forma leve, pr√°tica e util.
5. Evite criar blocos de foco em cima de hor√°rios fixos informados. Ex: se a pessoa disse que almo√ßa √†s 14h, n√£o faz sentido colocar a pr√≥xima tarefa para √†s 14h30, ela precisa do descanso antes de come√ßar a pr√≥xima tarefa. Para isso, use um tempo de transi√ß√£o.
6. Se sobrar tempo ao final do dia, ofere√ßa um bloco escrito "Tempo livre para curtir o dia" üßò‚Äç‚ôÄÔ∏è.
7. N√£o adicione negrito, markdown nem formata√ß√µes visuais fora da tabela. Apenas a tabela markdown e a frase final.
8. O t√≠tulo "ü§ñ Pronto! Organizei ai pra ti" deve ser inclu√≠do no topo da resposta da IA, como parte do markdown.
9. Sempre termine o planner com uma frase simp√°tica, engra√ßada e motivacional ‚Äî sem clich√™s de coach, logo ap√≥s a tabela no mesmo markdown.


Exemplo esperado de sa√≠da (formato da tabela lembre-se de centralizar a tabela '<div align="center">'):

| In√≠cio | Fim   | Tarefa                           | Prioridade |
|--------|-------|----------------------------------|------------|
| 13:45  | 14:00 | Relaxar antes do almo√ßo          | -          |
| 14:00  | 15:00 | Almo√ßar                          | Sim        |
| 15:00  | 15:15 | Pausa (volta do almo√ßo)          | -          |
| 15:15  | 16:00 | Estudar IA                       | Sim        |
| 16:00  | 16:15 | Pausa (respira fundo!)           | -          |
| 16:15  | 17:00 | Estudar IA                       | Sim        |
| 17:00  | 17:15 | Pausa (ir para a academia)       | -          |
| 17:15  | 18:00 | Treinar na academia              | Sim        |
| 18:00  | 18:15 | Pausa (volta da academia)        | -          |
| 18:15  | 19:00 | Estudar (opcional)               | Sim        |
| 19:00  | 19:45 | Tempo livre pra curtir o dia üßò‚Äç‚ôÄÔ∏è  | -          |


"""
    )

# Cria a inst√¢ncia do modelo
model = criar_modelo_organizai()

# üåÜ Aplica fundo da p√°gina
def set_background(image_file):
    with open(image_file, "rb") as img:
        encoded = base64.b64encode(img.read()).decode()

    st.markdown(
        f"""
        <style>
        table {{
            margin-left: auto; 
            margin-right: auto;

        }}

        .botao-personalizado {{
        display: inline-block; /* Permite que o bot√£o se ajuste ao conte√∫do */
        color: white;
        font-weight: bold;
        background: linear-gradient(135deg, rgba(255, 159, 207, 0.4), rgba(0, 255, 247, 0.4));
        padding: 6px 12px; /* Aumentei um pouco o padding para melhor toque em mobile */
        border-radius: 5px;
        text-decoration: none;
        font-size: 14px; /* Tamanho de fonte um pouco maior para mobile */
        margin-right: 10px; /* Adiciona margem √† direita para criar espa√ßo entre os bot√µes */
        margin-bottom: 10px; /* Adiciona margem abaixo para criar espa√ßo entre os bot√µes */
        white-space: nowrap; /* Evita que o texto quebre em v√°rias linhas, se poss√≠vel */
        }}

    
        @media (max-width: 600px) {{ 
        .botao-personalizado {{
            display: block; /* Faz o bot√£o ocupar a largura total dispon√≠vel */
            width: auto; /* Garante que o bot√£o ocupe toda a largura */
            margin-bottom: 8px; /* Adiciona um espa√ßo abaixo do bot√£o se houver outros elementos */
            text-align: center; /* Centraliza o texto dentro do bot√£o */
            box-sizing: border-box; /* Garante que o padding n√£o aumente a largura total */
            margin-right: 0; /* Remove a margem direita em telas menores */
        }}
        }}

        p {{
            text-align: center;
            }}

        .stApp {{
            background-image: url("data:image/png;base64,{encoded}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }}

        h1 {{
            text-align: center;
            font-weight: 800;
            text-shadow: 2px 2px 4px #FF9FCF;
        }}

        h2, .markdown-text-container h2 {{
            text-align: center !important;
            font-size: 1.2rem !important;
            font-weight: 400 !important;
            margin-top: -10px !important;
            color: #C6D8D9 !important;
        }}

        label, .stTextInput label, .stSelectbox label, .stNumberInput label, .stTextArea label {{
            color: #C6D8D9 !important;
            font-weight: 700;
        }}

        input, textarea {{
            background-color: rgba(255, 255, 255, 0.1);
            border: 2px solid #00FFF7;
            border-radius: 8px;
            color: white;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# ‚öôÔ∏è Configura a p√°gina e aplica o fundo
st.set_page_config(page_title="OrganizA√ç pra mim?", page_icon="üß†")
set_background("fundo.png")

# Cabe√ßalho do app
st.markdown("""
    <h1>üß† OrganizA√ç pra mim?</h1>
    <h2>Seu dia com efici√™ncia e uma pitada de intelig√™ncia.</h2>
    <hr>
""", unsafe_allow_html=True)

# ‚è∞ Cria lista de hor√°rios em intervalos de 15 minutos
horas = [f"{h:02d}:{m:02d}" for h in range(0, 24) for m in (0, 15, 30, 45)]

# üìã Formul√°rio de entrada de dados
with st.form("formulario"):
    col1, col2 = st.columns(2)
    with col1:
        horario_inicio = st.selectbox("‚è∞ **Que horas voc√™ quer come√ßar?**", horas)
        energia = st.selectbox("üîã **Como est√° sua energia?**", ["Alta", "M√©dia", "Baixa"], index=1)
        tarefas = st.text_area("üìã **Tarefas do dia (separadas por v√≠rgula)**", placeholder="Trabalhar, Estudar IA, Ir √† academia...")
    with col2:
        horario_fim = st.selectbox("üõå **At√© que horas quer produzir?**", horas, index=horas.index("22:00"))
        bloco = st.number_input("‚è±Ô∏è **Dura√ß√£o dos blocos (min)**", min_value=15, value=45, step=5)
        prioridades = st.text_area("‚≠ê **Tarefas priorit√°rias (ou 'Todas')**", placeholder="Estudar IA, Trabalhar...")
    enviar = st.form_submit_button(
        "Organiza a√≠ pra mim! üöÄ",
        use_container_width=True
    )
  

# üß† Extrai eventos do texto em Markdown gerado pela IA
def extrair_eventos(texto):
    eventos = []
    linhas = texto.split("\n")
    for linha in linhas:
        if "|" in linha and "-" not in linha:
            partes = [p.strip() for p in linha.split("|") if p.strip()]
            if len(partes) >= 3:
                inicio, fim, tarefa = partes[0], partes[1], partes[2]
                if ":" in inicio and ":" in fim:
                    eventos.append({"titulo": tarefa, "inicio_str": inicio, "fim_str": fim})
    return eventos

# üìÖ Gera link do Google Calendar
def gerar_link_google_calendar(titulo, inicio_str, fim_str, data_hoje_str):
    try:
        inicio_fmt = data_hoje_str + "T" + inicio_str.replace(":", "") + "00"
        fim_fmt = data_hoje_str + "T" + fim_str.replace(":", "") + "00"
    except:
        return None
    base = "https://www.google.com/calendar/render?action=TEMPLATE"
    text = f"&text={quote_plus(titulo)}"
    dates = f"&dates={quote_plus(inicio_fmt)}/{quote_plus(fim_fmt)}"
    details = f"&details=Gerado%20pelo%20OrganizA√ç"
    timezone = "&ctz=America/Sao_Paulo"
    return f"{base}{text}{dates}{details}{timezone}"

# üöÄ Gera√ß√£o do planner
if enviar:
    if not tarefas.strip():
        st.warning("Voc√™ precisa colocar pelo menos uma tarefa.")
    else:
        tarefas_list = [t.strip() for t in tarefas.split(",") if t.strip()]
        prioridades_list = tarefas_list if prioridades.strip().lower() == "todas" else [p.strip() for p in prioridades.split(",") if p.strip()]

        prompt = f"""
Planeje meu dia considerando:
- Come√ßo: {horario_inicio}
- Fim: {horario_fim}
- Energia: {energia}
- Blocos de foco: {bloco} minutos
- Tarefas: {', '.join(tarefas_list)}
- Prioridades: {', '.join(prioridades_list)}

Regras que voc√™ sempre deve seguir:
1. Se o usu√°rio indicar um hor√°rio espec√≠fico para uma tarefa (ex: ‚Äúalmo√ßar de 14h √†s 15h‚Äù), use esse hor√°rio exato e adapte os hor√°rios restantes em torno disso.
2. Se o usu√°rio mencionar que quer fazer algo em um hor√°rio espec√≠fico, leve isso como sugest√£o forte. Respeite.
3. Entre cada bloco de tarefa inclua uma pausa de 15 minutos antes da pr√≥xima tarefa sendo ela priorit√°ria ou n√£o, se houver tempo.
4. Evite engessar a resposta. Voc√™ deve analisar as tarefas que o usu√°rio quer fazer, a energia dele para fazer as tarefas, os blocos de tempo que ele sugeriu e os hor√°rios de come√ßar e terminar. Depois disso, voc√™ precisa pensar em como melhorar o planejamento do dia dele sempre de forma leve, pr√°tica e util.
5. Evite criar blocos de foco em cima de hor√°rios fixos informados. Ex: se a pessoa disse que almo√ßa √†s 14h, n√£o faz sentido colocar a pr√≥xima tarefa para √†s 14h30, ela precisa do descanso antes de come√ßar a pr√≥xima tarefa. Para isso, use um tempo de transi√ß√£o.
6. Se sobrar tempo ao final do dia, ofere√ßa um bloco escrito "Tempo livre para curtir o dia" üßò‚Äç‚ôÄÔ∏è.
7. N√£o adicione negrito, markdown nem formata√ß√µes visuais fora da tabela. Apenas a tabela markdown e a frase final.
8. O t√≠tulo "ü§ñ Pronto! Organizei ai pra ti" deve ser inclu√≠do no topo da resposta da IA, como parte do markdown.
9. Sempre termine o planner com uma frase simp√°tica, engra√ßada e motivacional ‚Äî sem clich√™s de coach, logo ap√≥s a tabela no mesmo markdown.


Exemplo esperado de sa√≠da (formato da tabela, lembre-se de centralizar a tabela '<div align="center">'):

| In√≠cio | Fim   | Tarefa                           | Prioridade |
|--------|-------|----------------------------------|------------|
| 13:45  | 14:00 | Relaxar antes do almo√ßo          | -          |
| 14:00  | 15:00 | Almo√ßar                          | Sim        |
| 15:00  | 15:15 | Pausa (volta do almo√ßo)          | -          |
| 15:15  | 16:00 | Estudar IA                       | Sim        |
| 16:00  | 16:15 | Pausa (respira fundo!)           | -          |
| 16:15  | 17:00 | Estudar IA                       | Sim        |
| 17:00  | 17:15 | Pausa (ir para a academia)       | -          |
| 17:15  | 18:00 | Treinar na academia              | Sim        |
| 18:00  | 18:15 | Pausa (volta da academia)        | -          |
| 18:15  | 19:00 | Estudar (opcional)               | Sim        |
| 19:00  | 19:45 | Tempo livre pra curtir o dia üßò‚Äç‚ôÄÔ∏è  | -          |

"""

        with st.spinner("Organizando seu dia com intelig√™ncia... üß†"):
            resposta = model.generate_content(prompt)
            texto_gerado = resposta.text
        

            st.markdown("""
                <div style="
                    background-color: rgba(255, 255, 255, 0.05);
                    padding: 2rem;
                    border-radius: 20px;
                    box-shadow: 0 0 15px rgba(255, 159, 207, 0.3);
                    margin-top: 2rem;
                    margin-bottom: 1rem;
                ">
                    <h3 style='color:#ffffff; text-align:center;'>üìã Planner do dia</h3>
                </div>
            """, unsafe_allow_html=True)

            eventos = extrair_eventos(texto_gerado)

            eventos_formatados = []
            for ev in eventos:
                titulo_lower = ev["titulo"].lower()
                if "almo√ßo" in titulo_lower or "almo√ßar" in titulo_lower:
                    inicio_dt = datetime.strptime(ev["inicio_str"], "%H:%M")
                    fim_dt = inicio_dt + timedelta(hours=1)
                    ev["fim_str"] = fim_dt.strftime("%H:%M")
                    ev["tipo"] = "almoco"
                elif "pausa" in titulo_lower:
                    ev["tipo"] = "pausa"
                elif "estudar" in titulo_lower:
                    if titulo_lower.strip() == "estudar":
                        ev["tipo"] = "estudo_vazio"
                    else:
                        ev["tipo"] = "estudo"
                        ev["termo_estudo"] = titulo_lower.replace("estudar", "").strip()
                else:
                    ev["tipo"] = "tarefa"
                eventos_formatados.append(ev)

            eventos = eventos_formatados

            eventos_com_pausas = []
            for i in range(len(eventos)):
                eventos_com_pausas.append(eventos[i])
                if i < len(eventos) - 1:
                    fim_atual = datetime.strptime(eventos[i]["fim_str"], "%H:%M")
                    inicio_prox = datetime.strptime(eventos[i + 1]["inicio_str"], "%H:%M")
                    if fim_atual < inicio_prox:
                        eventos_com_pausas.append({
                    "titulo": "Pausa ‚òï",
                    "inicio_str": fim_atual.strftime("%H:%M"),
                    "fim_str": inicio_prox.strftime("%H:%M"),
                    "tipo": "pausa"
                })

            markdown_tabela = "| In√≠cio | Fim | Tarefa | Prioridade |\n|--------|-----|--------|------------|\n"
            for ev in eventos_com_pausas:
                markdown_tabela += f"| {ev['inicio_str']} | {ev['fim_str']} | {ev['titulo']} | {'-' if 'pausa' in ev['titulo'].lower() else 'Sim'} |\n"

            st.markdown(texto_gerado)

            if eventos_com_pausas:
                st.markdown("""
                    <div style="
                        background-color: rgba(255, 255, 255, 0.05);
                        padding: 2rem;
                        border-radius: 20px;
                        box-shadow: 0 0 15px rgba(255, 159, 207, 0.3);
                        margin-top: 3rem;
                        margin-bottom: 1rem;
                    ">
                        <h3 style='color:#ffffff; text-align:center;'>üìÖ Adicionar ao Google Calendar</h3>
                    </div>
                """, unsafe_allow_html=True)

                data_str = datetime.now().strftime("%Y%m%d")

                for ev in eventos_com_pausas:
                    tipo = ev.get("tipo", "tarefa")
                    texto = f"{ev['inicio_str']} - {ev['fim_str']}: {ev['titulo']}"
                    botao_html = ""
                    if tipo == "pausa":
                        botao_html = '<a href="https://www.google.com/maps/search/cafeterias+padarias+parques+perto+de+mim" class="botao-personalizado" style="text-decoration: none; color: white">‚òï Hora do cafezinho</a>'

                    elif tipo == "almoco":
                        botao_html = '<a href="https://www.google.com/maps/search/restaurantes+perto+de+mim" class="botao-personalizado" style="text-decoration: none; color: white">üçΩÔ∏è Ver restaurantes</a>'

                    elif tipo == "estudo_vazio":
                        botao_html = (
                            '<a href="https://www.google.com" class="botao-personalizado" style="text-decoration: none; color: white">üîç Abrir Google</a><br>'

                            + f'<a href="{gerar_link_google_calendar(ev["titulo"], ev["inicio_str"], ev["fim_str"], data_str)}" class="botao-personalizado" style="text-decoration: none; color: white">‚ûï Add</a>'
                        )

                    elif tipo == "estudo":
                        termo = quote_plus("assuntos recentes sobre " + ev.get("termo_estudo", ""))
                        botao_html = (
                            f'<a href="https://www.google.com/search?q={termo}" class="botao-personalizado" style="text-decoration: none; color: white">üîç Pesquisar</a><br>'

                            + f'<a href="{gerar_link_google_calendar(ev["titulo"], ev["inicio_str"], ev["fim_str"], data_str)}" class="botao-personalizado" style="text-decoration: none; color: white">‚ûï Add</a>'
                        )
                    else:
                        botao_html = f'<a href="{gerar_link_google_calendar(ev["titulo"], ev["inicio_str"], ev["fim_str"], data_str)}" class="botao-personalizado" style="text-decoration: none; color: white">‚ûï Add</a>'

                    st.markdown(f"""
                        <div style="
                            background-color: rgba(255, 255, 255, 0.06);
                            padding: 1rem 1.5rem;
                            margin-bottom: 0.8rem;
                            border-radius: 12px;
                            box-shadow: 0 0 10px rgba(255, 255, 255, 0.05);
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        ">
                            <span style='font-size: 0.85rem; color: #EAEAEA;'>{texto}</span>
                            {botao_html}
                        </div>
                    """, unsafe_allow_html=True)

                st.caption("Lembre-se de ajustar a data no Google Calendar se estiver planejando para outro dia.")
